// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jahkeup/repost/notification (interfaces: DeliveryHandler)

// Package notification is a generated GoMock package.
package notification

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDeliveryHandler is a mock of DeliveryHandler interface
type MockDeliveryHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryHandlerMockRecorder
}

// MockDeliveryHandlerMockRecorder is the mock recorder for MockDeliveryHandler
type MockDeliveryHandlerMockRecorder struct {
	mock *MockDeliveryHandler
}

// NewMockDeliveryHandler creates a new mock instance
func NewMockDeliveryHandler(ctrl *gomock.Controller) *MockDeliveryHandler {
	mock := &MockDeliveryHandler{ctrl: ctrl}
	mock.recorder = &MockDeliveryHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeliveryHandler) EXPECT() *MockDeliveryHandlerMockRecorder {
	return m.recorder
}

// HandleDelivery mocks base method
func (m *MockDeliveryHandler) HandleDelivery(arg0 DeliveryNotification) error {
	ret := m.ctrl.Call(m, "HandleDelivery", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDelivery indicates an expected call of HandleDelivery
func (mr *MockDeliveryHandlerMockRecorder) HandleDelivery(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDelivery", reflect.TypeOf((*MockDeliveryHandler)(nil).HandleDelivery), arg0)
}
